<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>projectile = undefined;
spread = 0;
rate = 0;
fire_sound = undefined;

magazine_maximum = 0;
magazine_current = 0;
ammo_maximum = 0;
ammo_current = 0;

reload_time = 0;
reload_sound = undefined;
reloading = false;

overheats = false;
overheated = false;
overheat_rate = 0;
overheat_level = 0;
cooldown_rate = 0;
overheat_firerate_multiplier = 0;
overheat_spread_multiplier = 0;

draw_ammo_as_bar = false;

current_step = 0;
last_fired_step = 0;
can_shoot = false;

owner = undefined;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ammo_needed = magazine_maximum - magazine_current;

if (ammo_needed &gt; ammo_current) {
    ammo_needed = ammo_current;
}

ammo_current -= ammo_needed;

magazine_current += ammo_needed;

reloading = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_step++;

can_shoot = false;

var actualRate = rate + (overheat_firerate_multiplier * overheat_level);

if (current_step - last_fired_step &gt; actualRate) {
    if (magazine_current &gt; 0) {
        if (!reloading) {
            if (!overheated) {
                can_shoot = true;
            } 
        }
    }
}

if (overheats) {
    if (overheat_level &gt; 0) {
        overheat_level -= cooldown_rate;
    } else {
        overheat_level = 0;
        overheated = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reloading == false) {
    if (magazine_current &lt; magazine_maximum) {
        if (ammo_current &gt; 0) {
            reloading = true;
            
            if (reload_sound != undefined) {
                audio_play_sound_at(reload_sound, x, y, 0, 50, 300, 1, false, 0);
            }
            
            alarm[0] = reload_time;
        } else {
            show_debug_message("Error reloading - no ammo remaining!");
        }
    } else {
        show_debug_message("Error reloading - magazine is already full!");
    }
} else {
    show_debug_message("Error reloading - we are already reloading this weapon!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var actualSpread = spread + (overheat_level * overheat_spread_multiplier);

spawn_projectile(projectile, x, y, direction, actualSpread, owner);

if (fire_sound != undefined) {
    audio_play_sound_at(fire_sound, x, y, 0, 50, 300, 1, false, 0);
}

magazine_current -= 1;

if (overheats) {
    overheat_level += overheat_rate;
    if (overheat_level &gt;= 1.0) {
        overheated = true;
    }
}


last_fired_step = current_step;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
