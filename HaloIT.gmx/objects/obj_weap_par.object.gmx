<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = "";

projectile = undefined;
spread = 0;
rate = 0;
fire_sound = undefined;

burst_size = 1;
burst_delay = 0;
burst_count = 0;
burst_sound = undefined;

magazine_maximum = 0;
magazine_current = 0;
ammo_maximum = 0;
ammo_current = 0;

ammo_decreases = true;

reload_time = 0;
reload_sound = undefined;
reloading = false;
reloads_per_shot = false;

overheats = false;
overheated = false;
overheat_rate = 0;
overheat_level = 0;
cooldown_rate = 0;
cooldown_delay = 0;
overheat_firerate_multiplier = 0;
overheat_spread_multiplier = 0;
overheat_sound = undefined;

charges = false;
charge_rate = 0;
charge_max = 0;
charged_to = 0;
charging = false;
charge_delay = 0;
charge_start_time = 0;

projectile_count = 1;

ammo_transferable = true;

draw_ammo_as_bar = false;

current_step = 0;
last_fired_step = 0;
can_shoot = false;
needs_reloading = false;

owner = undefined;
target = undefined;

targeting_spr = undefined;

muzzle_flash = undefined;
muzzle_flash_spr = undefined;
muzzle_flash_size_x_base = 0;
muzzle_flash_size_x_range = 0;
muzzle_flash_size_x_charge = 0;
muzzle_flash_size_x_overheat = 0;
muzzle_flash_size_y_base = 0;
muzzle_flash_size_y_range = 0;
muzzle_flash_size_y_charge = 0;
muzzle_flash_size_y_overheat = 0;
muzzle_flash_blend_colour = c_white;

weapon_draw_sound = undefined;
weapon_draw_delay = 10;
weapon_draw_ready = true;

depth = 1;
s_emit = audio_emitter_create();
audio_emitter_falloff(s_emit, 50 , 300, 1);
playing_sound_index = undefined;

debug_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_free(s_emit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_draw_ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ammo_needed;

if (reloads_per_shot) {
    ammo_needed = 1; 
} else {
    ammo_needed = magazine_maximum - magazine_current;
}

if (ammo_needed &gt; ammo_current) {
    ammo_needed = ammo_current;
}

ammo_current -= ammo_needed;

magazine_current += ammo_needed;

reloading = false;

if (reloads_per_shot) {
    event_perform(ev_other, ev_user1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug) { 
    debug_string = "";
    debug_string += name;
    debug_string += "#";
    debug_string += "(" + string(magazine_current) + "/" + string(magazine_maximum) + ")(" + string(ammo_current) + "/" + string(ammo_maximum) + ")";
    debug_string += "#";
    debug_string += "(" + string(overheat_level) + "/" + string(1.0) + ")(" + string(charged_to) + "/" + string(charge_max) + ")";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_step++;

can_shoot = false;

var actualRate = rate + (overheat_firerate_multiplier * overheat_level);

if (current_step - last_fired_step &gt; actualRate) {
    if (magazine_current &gt; 0) {
        needs_reloading = false;
        if (!reloading) {
            if (!overheated) {
                if (weapon_draw_ready) {
                    can_shoot = true;
                }
            } 
        }
    } else {
        if (ammo_current &gt; 0) {
            needs_reloading = true;
        }
    }
}

if (overheat_level &gt; 0) {
    if (current_step - last_fired_step &gt; cooldown_delay) {
        overheat_level -= cooldown_rate;
    }
} else {
    overheat_level = 0;
    overheated = false;
}

if (charges) {
    if (charging) {
        if (current_step - charge_start_time &gt; charge_delay) {
            charged_to += charge_rate;
            if (charged_to &gt; charge_max) {
                charged_to = charge_max;
            }
            if (charged_to &gt; magazine_current) {
                charged_to = magazine_current;
            }
        }
    }
}

if (burst_count != 0) {
    if (burst_size &gt; burst_count) {
        if (current_step - last_fired_step &gt; burst_delay) {
            event_perform(ev_other, ev_user0);
        }
    }
    
    if (burst_count &gt;= burst_size) {
        burst_count = 0;
    }
}

audio_emitter_position(s_emit, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// used when switching to or picking up this weapon

// weapon can't fire until weapon_draw_delay has elapsed
weapon_draw_ready = false;
can_shoot = false;
alarm[1] = weapon_draw_delay;

if (weapon_draw_sound != undefined) {
    playing_sound_index = audio_play_sound_on(s_emit, weapon_draw_sound, false, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// used when switching away from or putting down this weapon

// cancel ongoing reloading
if (reloading) {
    reloading = false;
    alarm[0] = -1;
    show_debug_message("Aborting reload");
}

// stop any ongoing sound 
if (playing_sound_index != undefined) {
    audio_stop_sound(playing_sound_index); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>charging = true;
charge_start_time = current_step;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reloading == false) {
    if (magazine_current &lt; magazine_maximum) {
        if (ammo_current &gt; 0) {
            reloading = true;
            
            if (reload_sound != undefined) {
                reloading_sound_index = audio_play_sound_on(s_emit, reload_sound, false, 0);
            }
            
            alarm[0] = reload_time;
        } else {
            show_debug_message("Error reloading - no ammo remaining!");
        }
    } else {
        show_debug_message("Error reloading - magazine is already full!");
    }
} else {
    show_debug_message("Error reloading - we are already reloading this weapon!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var actualSpread = spread + (overheat_level * overheat_spread_multiplier);
var proj;

repeat (projectile_count) {
    proj = spawn_projectile(projectile, x, y, direction, actualSpread, owner);
}

if (owner != undefined and owner.target != undefined) {
    proj.target = owner.target;
}

if (muzzle_flash != undefined) {
    var flashSizeX, flashSizeY;
    flashSizeX = muzzle_flash_size_x_base + random_range(0, muzzle_flash_size_x_range);
    flashSizeY = muzzle_flash_size_y_base + random_range(0, muzzle_flash_size_y_range);
    
    if (charges) {
        flashSizeX += (muzzle_flash_size_x_charge * charged_to / charge_max);
        flashSizeY += (muzzle_flash_size_y_charge * charged_to / charge_max);
    }
    
    if (overheats) {
        flashSizeX += (muzzle_flash_size_x_overheat * overheat_level);
        flashSizeY += (muzzle_flash_size_y_overheat * overheat_level);
    }
    
    flash = instance_create(x, y, muzzle_flash);
    flash.sizeX = flashSizeX;
    flash.sizeY = flashSizeY;
    flash.blend_colour = muzzle_flash_blend_colour;
    if (muzzle_flash_spr != undefined) {
        flash.sprite_index = muzzle_flash_spr;
    }
    flash.direction = direction;
    flash.image_angle = direction;
}

if (charges) {
    if (ammo_decreases) {
        magazine_current -= (max(1, charged_to));
    }
    proj.charge = (charged_to / charge_max);
    charged_to = 0;
    charging = false;
} else {
    if (ammo_decreases) {
        magazine_current -= 1;
    }
}

if (burst_count == 0) {
    if (fire_sound != undefined) {
        audio_play_sound_on(s_emit, fire_sound, false, 0);
    }
}

if (burst_count &gt; 0) {
    if (burst_sound != undefined) {
        audio_play_sound_on(s_emit, burst_sound, false, 0);
    }
}

overheat_level += overheat_rate;
if (overheat_level &gt;= 1.0) {
    overheat_level = 1.0;
    if (overheats) {
        overheated = true;
        if (overheat_sound != undefined) {
            audio_play_sound_on(s_emit, overheat_sound, false, 0);
        }
    }
}

burst_count++;
last_fired_step = current_step;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.debug) {

    if (owner == undefined or !instance_exists(owner)) {

        var drawX = x;
        var drawY = y - 50;
            
        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_font(debug_font);
    
        draw_text(drawX, drawY, debug_string);
        
    }
       
    if (owner != undefined) {
        draw_set_alpha(0.5);
        draw_set_colour(c_red);
        draw_line(x, y, x + lengthdir_x(1000, direction), y + lengthdir_y(1000, direction));
        draw_set_alpha(1);
        draw_set_colour(c_white);
    }
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

if (owner == undefined) {
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, image_angle, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
