<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp_max = -1;
hp_regen_rate = 0;
hp_regen_delay = 0;
hp = 0;

shield_max = -1;
shield_regen_rate = 0;
shield_regen_delay = 0;
shield = 0;

shield_regen_start_sound = undefined;
shield_regen_start_sound_id = undefined;
shield_regen_critical_sound = undefined;
shield_regen_critical_sound_id = undefined;
shield_regen_critical_ratio = 0.5;

current_step = 0;
last_hp_step = 0;
last_shield_step = 0;

team = 0;
target = undefined;

lastHitX = 0;
lastHitY = 0;
lastHitSize = 0;

debug_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug) {  
    debug_string = "";
    
    if (shield != -1) {
        debug_string += "(S" + string(shield) + ")";
    }
    
    if (hp != -1) {
        debug_string += "(H" + string(hp) + ")";
    }
    
    if(debug_string != "") { debug_string += "#"; }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (current_step == 0) {
    hp = hp_max;
    shield = shield_max;
}

if (hp_max != -1 &amp;&amp; hp &lt;= 0) {
    instance_destroy();
}

if (current_step - last_hp_step &gt; hp_regen_delay) {
    hp += hp_regen_rate;
    if (hp &gt; hp_max) {
        hp = hp_max;
    }
}

if (current_step - last_shield_step &gt; shield_regen_delay) {
    if (shield &lt; shield_max) {
        shield += shield_regen_rate;
        if (shield &gt; shield_max) {
            shield = shield_max;
        }
        if (shield_regen_start_sound != undefined) {
            if (shield_regen_start_sound_id == undefined or !audio_is_playing(shield_regen_start_sound_id)) {
                shield_regen_start_sound_id = audio_play_sound(shield_regen_start_sound, 1, false);
            }
        }
        if (shield_regen_critical_sound != undefined) {
            if (shield &lt; shield_max * shield_regen_critical_ratio) {
                if (shield_regen_critical_sound_id == undefined or !audio_is_playing(shield_regen_critical_sound_id)) {
                    shield_regen_critical_sound_id = audio_play_sound(shield_regen_critical_sound, 1, false);
                }
            }
        }
    } else {
        if (shield_regen_start_sound_id != undefined and audio_is_playing(shield_regen_start_sound_id)) {
            audio_sound_gain(shield_regen_start_sound_id, 0, 100);
        }
    }
} else {
    if (shield_regen_start_sound_id != undefined and audio_is_playing(shield_regen_start_sound_id)) {
        audio_stop_sound(shield_regen_start_sound_id);
    }
    
}

current_step++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug) {
    effect_create_above(ef_spark, proj_coll[1], proj_coll[2], 0, c_red);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug) {
    effect_create_above(ef_spark, lastHitX, lastHitY, 0, c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (proj_coll != undefined) {
    if (proj_coll[0] != noone) {
        if (shield &gt; 0 and proj_coll[0].damage_shield &gt; 0) {
            shield -= proj_coll[0].damage_shield;
            if(shield &lt; 0) { shield = 0; }
            
            lastHitX = proj_coll[1];
            lastHitY = proj_coll[2];
            lastHitSize = proj_coll[0].damage_shield;
            
            event_perform(ev_other, ev_user1);
            
            last_shield_step = current_step;
        } else if (hp &gt; 0 and proj_coll[0].damage_hp &gt; 0) {
            hp -= proj_coll[0].damage_hp;
            if(hp &lt; 0) { hp = 0; }
            
            lastHitX = proj_coll[1];
            lastHitY = proj_coll[2];
            lastHitSize = proj_coll[0].damage_hp;
            
            event_perform(ev_other, ev_user2);
            
            last_shield_step = current_step;
            last_hp_step = current_step;
        }
        if (proj_coll[0].collided_with == undefined) {
            proj_coll[0].x = proj_coll[1];
            proj_coll[0].y = proj_coll[2];
            proj_coll[0].collided_with = id;
            with proj_coll[0] { event_perform(ev_other, ev_user0); }
        }        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug) {  
    if (debug_string != "") {

        draw_set_colour(c_white);
        draw_set_halign(fa_center);
        draw_set_font(debug_font);
        
        var yOffset = 10 + string_height(debug_string);
    
        draw_text(x, y - yOffset, debug_string);
        
        draw_set_colour(c_black);
        draw_set_halign(fa_left);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
