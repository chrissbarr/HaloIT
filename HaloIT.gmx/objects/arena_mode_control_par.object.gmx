<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>0</persistent>
  <parentName>level_control_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deadenemies=0

audio_stop_all();
audio_play_sound(arenabattle_music, 0, true);

player = instance_create(spawnlocater_obj.x, spawnlocater_obj.y, obj_mc);

time = 0;

wave_index = 0;

waves = ds_list_create();
ds_list_add(waves, arena_define_wave(5,0,0));
ds_list_add(waves, arena_define_wave(3,2,0));
ds_list_add(waves, arena_define_wave(3,2,1));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ds_list_shuffle(spawnable_pickups);
//instance_create(random(room_width), random(room_height), spawnable_pickups[| 0]);

alarm[0]=room_speed*2+random(room_speed*6)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time += 1;

if (paused == false) {
    if (instance_number(covenant_par) == 0) {
        wave = waves[| wave_index];
        
        // find a location outside of player's view to spawn the squad
        var squadX, squadY;
        var squadSpawnSafe = false;
        
        while (squadSpawnSafe == false) {
            squadX = random(room_width);
            squadY = random(room_height);  
            
            if (point_distance(player.x, player.y, squadX, squadY) &gt; 400) {
                if (!collision_circle(squadX, squadY, 100, character_par_obj, false, false)) {
                    squadSpawnSafe = true;
                }
            }            
        }        
        
        // spawn each entity within the squad
        for (i = 0; i &lt; ds_list_size(wave); i++) {
            var squadRadius = 80;
            var spawnX, spawnY;
            var safeSpawn = false;
            var spawnAttempts = 0;
            
            // find a non-colliding spawn location within the squad
            while (safeSpawn == false) {            
                spawnX = squadX + random(squadRadius) - squadRadius / 2;
                spawnY = squadY + random(squadRadius) - squadRadius / 2;                
                if (!collision_point(spawnX, spawnY, character_par_obj, false, false)) {
                    safeSpawn = true;
                }
                spawnAttempts += 1;
                if (spawnAttempts &gt; 50) {
                    break;
                }     
            }
            
            instance_create(spawnX, spawnY, wave[| i]);
        }
        
        if (wave_index &lt; ds_list_size(waves) - 1) {
            wave_index += 1;
        }           
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw time
draw_set_color(c_red);
draw_text(view_xview + 340, view_yview + 455,'Time: ' + string(round(time/30)));

// draw wave
draw_set_color(c_red);
draw_text(view_xview + 400,view_yview + 455,'Wave: ' + string(wave_index+1));

set_norm()

// draw score
if instance_exists(player) {
    score_text = string(deadenemies)+ ' Kill';
    if (deadenemies != 1) {
        score_text += 's';
    }
    draw_text(player.x - 20, player.y - 30, score_text)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
